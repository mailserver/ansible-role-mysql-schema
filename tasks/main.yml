---

# combine defaults with role parameters
  - set_fact: _mailsystem_db="{{ mailsystem_default_db | combine(mailsystem_db, recursive=True) }}"
    no_log: true
  - set_fact: _sqlgrey_db="{{ sqlgrey_default_db | combine(sqlgrey_db, recursive=True) }}"
    no_log: true

# ansible dependencies

  - name: Install tools
    apt: name={{item}} state=present
    when: ansible_distribution == "Debian"
    with_items:
      - python-mysqldb
      - mysql-client

  - name: Install tools
    pkgng: name={{item}} state=present
    when: ansible_distribution == "FreeBSD"
    with_items:
      - mariadb101-client
      - py27-mysql-connector-python2

# Mail DB
  - name: check if mail database is empty
    shell: mysql --column-names=0 --batch
            -u {{_mailsystem_db.user}} --password={{_mailsystem_db.password}}
            -h {{_mailsystem_db.host}}
            -e "SELECT count(*) from information_schema.tables WHERE table_schema = '{{_mailsystem_db.db}}';" 
    register: check_mysql_db_mail
  - include: setup_mysql_db_schema.yml
    vars:
      schema_template: schema_mail.sql.jj2
      db_conn: "{{_mailsystem_db}}"
    when: (mailsystem_db_present == True) and (check_mysql_db_mail.stdout == "0")
  - fail: msg="Database {{_mailsystem_db.db}} on {{_mailsystem_db.host}} is not empty"
    when: (mailsystem_db_present == True) and (check_mysql_db_mail.stdout != "0") 

# SQLGREY DB

  - name: check if sqlgrey database exists
    shell: mysql --column-names=0 --batch 
            -u {{_sqlgrey_db.user}} --password={{_sqlgrey_db.password}}
            -h {{_sqlgrey_db.host}}
            -e "SELECT count(*) from information_schema.tables WHERE table_schema = '{{_sqlgrey_db.db}}';" 
    register: check_mysql_db_sqlgrey
  - include: setup_mysql_db_schema.yml
    vars:
      schema_template: schema_sqlgrey.sql.jj2
      db_conn: "{{_sqlgrey_db}}"
    when: (sqlgrey_db_present == True) and (check_mysql_db_sqlgrey.stdout == "0")
  - fail: msg="Database {{_sqlgrey_db.db}} on {{_sqlgrey_db.host}} is not empty"
    when: (sqlgrey_db_present == True) and (check_mysql_db_sqlgrey.stdout != "0")

# SEED if wanted

  - name: determine how many accounts exist in database
    when: mailsystem_db_demo_seed == True
    shell: "mysql -u{{_mailsystem_db.user}} -p{{_mailsystem_db.password}} -h{{_mailsystem_db.host}} {{_mailsystem_db.db}} --skip-column-names -s -e 'SELECT COUNT(*) FROM account;'"
    register: check_mysql_account_count
  
  - assert:
      that:
        - mailsystem_db is defined
        - mailsystem_db_demo_seed_postmaster_address is defined
        - mailsystem_db_demo_seed_virtual_domain is defined
  
  - include: import_seed.yml
    when: (mailsystem_db_demo_seed == True) and (check_mysql_account_count.stdout == "0")
  - fail: msg="Table `account` in DB {{_mailsystem_db.host}} is not empty"
    when: (mailsystem_db_demo_seed == True) and (check_mysql_account_count.stdout != "0")
  
